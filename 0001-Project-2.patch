From cafe4190c97d658656ea7d4c0cbf22c41b64c316 Mon Sep 17 00:00:00 2001
From: Hashir Mahmood <thatburntnerve@gmail.com>
Date: Thu, 27 Jul 2023 14:08:13 +0100
Subject: [PATCH] Project 2

---
 src/App.tsx   | 27 ++++++++++++++++++---------
 src/Graph.tsx | 16 +++++++++++++---
 2 files changed, 31 insertions(+), 12 deletions(-)

diff --git a/src/App.tsx b/src/App.tsx
index 0728518..1152fd2 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,6 +8,7 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  showGraph: boolean,
 }
 
 /**
@@ -19,9 +20,8 @@ class App extends Component<{}, IState> {
     super(props);
 
     this.state = {
-      // data saves the server responds.
-      // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph: false,
     };
   }
 
@@ -29,20 +29,29 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    if (this.state.showGraph) {
+      return (<Graph data={this.state.data}/>)
+    }
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
-      // Update the state by creating a new array of data that consists of
-      // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
+    let x = 0
+    const interval = setInterval(() => {
+      DataStreamer.getData((serverResponds: ServerRespond[]) => {
+        this.setState({
+          data: serverResponds,
+          showGraph: true,
+        });
+      });
+      x++;
+      if (x > 1000) {
+        clearInterval(interval);
+      }
+    }, 100);
   }
-
   /**
    * Render the App react component
    */
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 3b2a7da..b724755 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement {
   load: (table: Table) => void,
 }
 
@@ -32,7 +32,7 @@ class Graph extends Component<IProps, {}> {
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
       stock: 'string',
@@ -49,7 +49,17 @@ class Graph extends Component<IProps, {}> {
 
       // Add more Perspective configurations here.
       elem.load(this.table);
-    }
+    elem.setAttribute('view', 'y line');
+    elem.setAttribute('column-pivots', '["stock"]');
+    elem.setAttribute(' row-pivots', '["timestamp"]');
+    elem.setAttribute('columns', '["top ask price"]');
+    elem.setAttribute( 'aggregates’,
+      {"stock": "distinct count",
+       "top ask price":"avg",
+       "top bid price”:"avg”,
+       "timestamp": "distinct count"}’);
+
+
   }
 
   componentDidUpdate() {
-- 
2.39.1.windows.1

